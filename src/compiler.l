/* Definition section */
%{
    #include <utf8.c/utf8.h>
    #include "compiler_util.h"
    #include "compiler_common.h"
    #include "y.tab.h"	/* header file generated by bison */

    #define YY_NO_UNPUT
    #define YY_NO_INPUT

    extern YYSTYPE yylval;
    
    bool unregChar = false, unregCharStop = true;

    int yycolumn, yyoffset, yycolumnUtf8, yylengUtf8;
    utf8_string yytokenUtf8;

    void readUnrecognizedChar() {
        if (unregChar) {
            if (yytokenUtf8.str) {
                yyerrorf("謬字「%s」\n", yytext);
                unregChar = false;
                compileError = true;
            } else {
                yymore();
            }
        }
    }

    #define YY_USER_ACTION                                              \
        yytokenUtf8 = make_utf8_string(yytext);                         \
        yylengUtf8 = yytokenUtf8.str ? utf8_char_count(yytokenUtf8) : 0;\
        yycolumnUtf8 += yylengUtf8;                                     \
        yyoffset += yyleng;                                             \
        yycolumn += yyleng;                                             \
        unregCharStop = true;

    #define YY_BREAK                    \
        readUnrecognizedChar();         \
        if (yy_more_flag) {             \
            yycolumnUtf8 -= yylengUtf8; \
            yyoffset -= yyleng;         \
            yycolumn -= yyleng;         \
        }                               \
        break;

    int strLastTokenLen = 0;
    bool checkStringEnd() {
        // utf8_string utf8 = make_utf8_string(str);
        // utf8_char_iter iter = make_utf8_char_iter(utf8);
        // utf8_char c;
        // while((c = next_utf8_char(&iter)).byte_len) {
        // }

        if (yyleng - strLastTokenLen >= 6) {
            strLastTokenLen = yyleng - 6;
            yylval.s_var = (char*)malloc(strLastTokenLen + 1);
            memcpy(yylval.s_var, yytext, strLastTokenLen);
            yylval.s_var[strLastTokenLen] = 0;
            return true;
        }

        strLastTokenLen = yyleng;
        yymore();
        return false;
    }
%}

/* Define regular expression label */
digit ("負"|"·"|"又"|"有"|"零"|"〇"|"一"|"二"|"三"|"四"|"五"|"六"|"七"|"八"|"九"|"兩"|"十"|"百"|"千"|"萬"|"億"|"兆"|"京"|"垓"|"秭"|"穰"|"溝"|"澗"|"正"|"載"|"極"|"分"|"釐"|"毫"|"絲"|"忽"|"微"|"纖"|"沙"|"塵"|"埃"|"渺"|"漠"|"壹"|"貳"|"參"|"肆"|"伍"|"陸"|"柒"|"捌"|"玖"|"拾"|"佰"|"仟")

ASCII   [\x00-\x7f]
U       [\x80-\xbf]

B2      [\xC2-\xDF]{U}
B3_1    \xE0[\xA0-\xBF]{U}
B3_2    [\xE1-\xEC]{U}{U}
B3_3    \xED[\x80-\x9F]{U}
B3_4    [\xEE-\xEF]{U}{U}
B4_1    \xF0[\x90-\xBF]{U}{U}
B4_2    [\xF1-\xF3]{U}{U}{U}
B4_3    \xF4[\x80-\x8F]{U}{U}

/* ALL UTF-8 https://www.w3.org/2005/03/23-lex-U#charRange
  {ASCII}
| ([\xC2-\xDF] {U})
| ( \xE0       [\xA0-\xBF]{U})
| ([\xE1-\xEC] {U}{U})
| ( \xED       [\x80-\x9F]{U})
| ([\xEE-\xEF] {U}{U})
| ( \xF0       [\x90-\xBF]{U}{U})
| ([\xF1-\xF3] {U}{U}{U})
| ( \xF4       [\x80-\x8F]{U}{U})
*/

ALL_UTF8 {ASCII}|{B2}|{B3_1}|{B3_2}|{B3_3}|{B3_4}|{B4_1}|{B4_2}|{B4_3}

B3_2_EXCLUDE_QUO ([\xE1-\xE2]{U}{U})|(\xE3\x80[\x80-\x8C\x8E-\xBF])|(\xE3[\x81-\xBF]{U})|([\xE4-\xEC]{U}{U})
EXCLUDE_QUO {ASCII}|{B2}|{B3_1}|{B3_2_EXCLUDE_QUO}|{B3_3}|{B3_4}|{B4_1}|{B4_2}|{B4_3}

%option yylineno
%x CMT_CON
%x STR_CON
%x IDENT_CON


/* Rules section */
%%

"/*"                        { BEGIN(CMT_CON); }
<CMT_CON>.+                 {}
<CMT_CON>\r?\n              { yycolumn = yycolumnUtf8 = 0; }
<CMT_CON>"*/"               { BEGIN(INITIAL); }
"//".*                      {}

"「「"        { BEGIN(STR_CON); strLastTokenLen = 0; }
<STR_CON>"」"+    { if (checkStringEnd()) { BEGIN(INITIAL); return STR_LIT; } }
<STR_CON>{EXCLUDE_QUO}+    { yymore(); strLastTokenLen = yyleng; }

"「"        { BEGIN(IDENT_CON); }
<IDENT_CON>"」"    { BEGIN(INITIAL); }
<IDENT_CON>{EXCLUDE_QUO}+    { yylval.s_var = strdup(yytext); return IDENT; }

{digit}+    {
    if (chineseToArabic(yytext, &yylval.number_var))
        yyterminate();
    return NUMBER_LIT;
}


"有數" { return IMMEDIATE_NUMBER_IS; }

"吾有" { return IMMEDIATE; }

"一言" { return STRING; }
"一數" { return NUMBER; }

"名之曰" { return CALLED; }
"曰" { return IS; }

"書之" { return PRINT; }

"。" {}

[ \t]+        {}
\r?\n         { yycolumn = yycolumnUtf8 = 0; }

<<EOF>>     { 
                static int once = 0;
                if (once++) {
                    yyterminate();
                }
            }

. {
    if(!unregChar) unregChar = true;
    unregCharStop = false;
}

%%
/*  C Code section */
int yywrap(void) {
    return 1;
}